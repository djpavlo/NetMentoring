›
S/Users/pavel/project/NetMentoring/CatalogService.Infrastructure/CatalogDbContext.cs
	namespace 	
CatalogService
 
. 
Infrastructure '
;' (
public 
class 
CatalogDbContext 
: 
	DbContext  )
{ 
public 
CatalogDbContext	 
( 
DbContextOptions *
<* +
CatalogDbContext+ ;
>; <
options= D
)D E
:F G
baseH L
(L M
optionsM T
)T U
{V W
}X Y
public

 
DbSet

	 
<

 
Category

 
>

 

Categories

 #
{

$ %
get

& )
;

) *
set

+ .
;

. /
}

0 1
public 
DbSet	 
< 
ProductItem 
> 
ProductItems (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
} ¤
U/Users/pavel/project/NetMentoring/CatalogService.Infrastructure/CategoryRepository.cs
	namespace 	
CatalogService
 
. 
Infrastructure '
;' (
public 
class 
CategoryRepository 
:  !
ICategoryRepository" 5
{ 
private		 	
readonly		
 
CatalogDbContext		 #

_dbContext		$ .
;		. /
public 
CategoryRepository	 
( 
CatalogDbContext ,
	dbContext- 6
)6 7
{ 

_dbContext 
= 
	dbContext 
; 
} 
public 
async	 
Task 
< 
Category 
? 
>  
GetCategoryByIdAsync 3
(3 4
int4 7
id8 :
): ;
{ 
return 

await 

_dbContext 
. 

Categories &
. 	
FirstOrDefaultAsync	 
( 
c 
=> !
c" #
.# $
Id$ &
==' )
id* ,
), -
;- .
} 
public 
async	 
Task 
< 
List 
< 
Category !
>! "
>" #
GetCategoriesAsync$ 6
(6 7
)7 8
{ 
return 

await 

_dbContext 
. 

Categories &
. 	
ToListAsync	 
( 
) 
; 
} 
public 
async	 
Task 
AddCategoryAsync $
($ %
Category% -
category. 6
)6 7
{ 
category 
. 
Validate 
( 
) 
; 

_dbContext 
. 

Categories 
. 
Add 
( 
category &
)& '
;' (
await   	

_dbContext  
 
.   
SaveChangesAsync   %
(  % &
)  & '
;  ' (
}!! 
public## 
async##	 
Task## 
UpdateCategoryAsync## '
(##' (
Category##( 0
category##1 9
)##9 :
{$$ 
category%% 
.%% 
Validate%% 
(%% 
)%% 
;%% 

_dbContext&& 
.&& 
Entry&& 
(&& 
category&& 
)&& 
.&& 
State&& $
=&&% &
EntityState&&' 2
.&&2 3
Modified&&3 ;
;&&; <
await'' 	

_dbContext''
 
.'' 
SaveChangesAsync'' %
(''% &
)''& '
;''' (
}(( 
public** 
async**	 
Task** 
DeleteCategoryAsync** '
(**' (
int**( +
id**, .
)**. /
{++ 
var,, 
category,, 
=,, 
await,, 

_dbContext,, #
.,,# $

Categories,,$ .
.,,. /
	FindAsync,,/ 8
(,,8 9
id,,9 ;
),,; <
;,,< =
if-- 
(-- 
category-- 
==-- 
null-- 
)-- 
{.. 
throw// 
new// 
	Exception// 
(// 
$"// 
$str// /
{/// 0
id//0 2
}//2 3
$str//3 >
"//> ?
)//? @
;//@ A
}00 

_dbContext11 
.11 

Categories11 
.11 
Remove11  
(11  !
category11! )
)11) *
;11* +
await22 	

_dbContext22
 
.22 
SaveChangesAsync22 %
(22% &
)22& '
;22' (
}33 
}44 Ì(
X/Users/pavel/project/NetMentoring/CatalogService.Infrastructure/ProductItemRepository.cs
	namespace 	
CatalogService
 
. 
Infrastructure '
;' (
public 
class !
ProductItemRepository "
:# $"
IProductItemRepository% ;
{ 
private		 	
readonly		
 
CatalogDbContext		 #

_dbContext		$ .
;		. /
public !
ProductItemRepository	 
( 
CatalogDbContext /
	dbContext0 9
)9 :
{ 

_dbContext 
= 
	dbContext 
; 
} 
public 
async	 
Task 
< 
ProductItem 
?  
>  !
GetItemByIdAsync" 2
(2 3
int3 6
id7 9
)9 :
{ 
return 

await 

_dbContext 
. 
ProductItems (
.( )
AsNoTracking) 5
(5 6
)6 7
. 	
Include	 
( 
i 
=> 
i 
. 
Category  
)  !
. 	
FirstOrDefaultAsync	 
( 
i 
=> !
i" #
.# $
Id$ &
==' )
id* ,
), -
;- .
} 
public 
async	 
Task 
< 
List 
< 
ProductItem $
>$ %
>% &
GetItemsAsync' 4
(4 5
int& )
?) *
page+ /
=0 1
null2 6
,6 7
int& )
pageSize* 2
=3 4
$num5 7
)7 8
{ 
var 
productItems 
= 

_dbContext !
.! "
ProductItems" .
.. /
Include/ 6
(6 7
i7 8
=>9 ;
i< =
.= >
Category> F
)F G
.G H
AsQueryableH S
(S T
)T U
;U V
if 
( 
page 
== 
null 
) 
{ 
return 
await 
productItems 
.  
ToListAsync  +
(+ ,
), -
;- .
}   
var## 
pagedCategories## 
=## 
await## 
productItems##  ,
.##, -
Skip##- 1
(##1 2
(##2 3
page##3 7
??##8 :
$num##; <
-##= >
$num##? @
)##@ A
*##B C
pageSize##D L
)##L M
.##M N
Take##N R
(##R S
pageSize##S [
)##[ \
.##\ ]
ToListAsync##] h
(##h i
)##i j
;##j k
return$$ 

pagedCategories$$ 
;$$ 
}%% 
public'' 
async''	 
Task'' 
AddItemAsync''  
(''  !
ProductItem''! ,
item''- 1
)''1 2
{(( 
await)) 	

_dbContext))
 
.)) 
ProductItems)) !
.))! "
AddAsync))" *
())* +
item))+ /
)))/ 0
;))0 1
await** 	

_dbContext**
 
.** 
SaveChangesAsync** %
(**% &
)**& '
;**' (
}++ 
public-- 
async--	 
Task-- 
UpdateItemAsync-- #
(--# $
ProductItem--$ /
item--0 4
)--4 5
{.. 

_dbContext// 
.// 
Entry// 
(// 
item// 
)// 
.// 
State//  
=//! "
EntityState//# .
.//. /
Modified/// 7
;//7 8
await00 	

_dbContext00
 
.00 
SaveChangesAsync00 %
(00% &
)00& '
;00' (
}11 
public33 
async33	 
Task33 
DeleteItemAsync33 #
(33# $
int33$ '
id33( *
)33* +
{44 
var55 
item55 
=55 
await55 

_dbContext55 
.55  
ProductItems55  ,
.55, -
	FindAsync55- 6
(556 7
id557 9
)559 :
;55: ;
if66 
(66 
item66 
==66 
null66 
)66 
{77 
throw88 
new88 
	Exception88 
(88 
$"88 
$str88 +
{88+ ,
id88, .
}88. /
$str88/ :
"88: ;
)88; <
;88< =
}99 

_dbContext:: 
.:: 
ProductItems:: 
.:: 
Remove:: "
(::" #
item::# '
)::' (
;::( )
await;; 	

_dbContext;;
 
.;; 
SaveChangesAsync;; %
(;;% &
);;& '
;;;' (
}<< 
}== 