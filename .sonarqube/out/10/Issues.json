{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.6.0.0",
        "fileVersion": "4.6.0-3.23212.2 (d78a163b)",
        "semanticVersion": "4.6.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartService.UnitTests.cs",
                "region": {
                  "startLine": 63,
                  "startColumn": 75,
                  "endLine": 63,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "Cannot convert null literal to non-nullable reference type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartService.UnitTests.cs",
                "region": {
                  "startLine": 63,
                  "startColumn": 75,
                  "endLine": 63,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_cartRepositoryMock' must contain a non-null value when exiting constructor. Consider declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartService.UnitTests.cs",
                "region": {
                  "startLine": 11,
                  "startColumn": 35,
                  "endLine": 11,
                  "endColumn": 54
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartService.UnitTests.cs",
                "region": {
                  "startLine": 11,
                  "startColumn": 35,
                  "endLine": 11,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_cartService' must contain a non-null value when exiting constructor. Consider declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartService.UnitTests.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 25,
                  "endLine": 12,
                  "endColumn": 37
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartService.UnitTests.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 25,
                  "endLine": 12,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartService.UnitTests.cs",
                "region": {
                  "startLine": 54,
                  "startColumn": 7,
                  "endLine": 54,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2016",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Null), instead of the classic model, Assert.Null(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartService.UnitTests.cs",
                "region": {
                  "startLine": 69,
                  "startColumn": 7,
                  "endLine": 69,
                  "endColumn": 24
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "Null"
            }
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 58,
                  "startColumn": 25,
                  "endLine": 58,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 13,
                  "endLine": 39,
                  "endColumn": 73
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 40,
                  "startColumn": 13,
                  "endLine": 40,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 41,
                  "startColumn": 13,
                  "endLine": 41,
                  "endColumn": 79
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 38,
                  "startColumn": 25,
                  "endLine": 38,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 116,
                  "startColumn": 13,
                  "endLine": 116,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 117,
                  "startColumn": 13,
                  "endLine": 117,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 80,
                  "startColumn": 13,
                  "endLine": 80,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 82,
                  "startColumn": 13,
                  "endLine": 82,
                  "endColumn": 74
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 13,
                  "endLine": 83,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "endLine": 84,
                  "endColumn": 80
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 85,
                  "startColumn": 13,
                  "endLine": 85,
                  "endColumn": 86
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 86,
                  "startColumn": 13,
                  "endLine": 86,
                  "endColumn": 74
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "endLine": 87,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 88,
                  "startColumn": 13,
                  "endLine": 88,
                  "endColumn": 80
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///Users/pavel/project/NetMentoring/CartingService.UnitTests/CartRepository.UnitTests.cs",
                "region": {
                  "startLine": 81,
                  "startColumn": 25,
                  "endLine": 81,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "CS8600": {
          "id": "CS8600",
          "shortDescription": "Converting null literal or possible null value to non-nullable type.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8600)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8618": {
          "id": "CS8618",
          "shortDescription": "Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8618)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8625": {
          "id": "CS8625",
          "shortDescription": "Cannot convert null literal to non-nullable reference type.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8625)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "NUnit2005": {
          "id": "NUnit2005",
          "shortDescription": "Consider using Assert.That(actual, Is.EqualTo(expected)) instead of Assert.AreEqual(expected, actual)",
          "fullDescription": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual).",
          "defaultLevel": "warning",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2005.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2016": {
          "id": "NUnit2016",
          "shortDescription": "Consider using Assert.That(expr, Is.Null) instead of Assert.Null(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.Null), instead of the classic model, Assert.Null(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2016.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2045": {
          "id": "NUnit2045",
          "shortDescription": "Use Assert.Multiple",
          "fullDescription": "Hosting Asserts inside an Assert.Multiple allows detecting more than one failure.",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2045.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2046": {
          "id": "NUnit2046",
          "shortDescription": "Use CollectionConstraint for better assertion messages in case of failure",
          "fullDescription": "Use Has.Length/Has.Count/Is.Empty instead of testing property directly.",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2046.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        }
      }
    }
  ]
}